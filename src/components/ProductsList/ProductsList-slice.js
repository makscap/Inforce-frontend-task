// import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
// import { fetchCount } from "./ProductList-API";

// const initialState = {
//   // name: "Product name333",
//   // imageUrl: "some url here1",
//   // count: "42",
//   // size: {
//   //   width: 200,
//   //   height: 200,
//   // },
//   // weight: "200g",
//   // comments: ["CommentModel", "CommentModel"],
//   // id: 1,
// };

// // The function below is called a thunk and allows us to perform async logic. It
// // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// // will call the thunk with the `dispatch` function as the first argument. Async
// // code can then be executed and other actions can be dispatched. Thunks are
// // typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   "counter/fetchCount",
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

// export const counterSlice = createSlice({
//   name: "productList",
//   initialState,
//   // The `reducers` field lets us define reducers and generate associated actions
//   reducers: {
//     // changeName: (state, action) => {
//     //   state.name = action.payload;
//     // },
//     // changeImgUrl: (state, action) => {
//     //   state.imageUrl = action.payload;
//     // },
//     // changeCount: (state, action) => {
//     //   state.count = action.payload;
//     // },
//     // changeSize: (state, action) => {
//     //   state.size = action.payload;
//     // },
//     // changeWeight: (state, action) => {
//     //   state.weight = action.payload;
//     // },
//     // changeComments: (state, action) => {
//     //   state.comments = action.payload;
//     // },
//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = "loading";
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = "idle";
//         state.value += action.payload;
//       });
//   },
// });

// export const {
//   // changeName,
//   // changeImgUrl,
//   // changeCount,
//   // changeSize,
//   // changeWeight,
//   // changeComments,
// } = counterSlice.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// // export const selectName = (state) => state.productList.name;
// // export const selectImgUrl = (state) => state.productList.name;
// // export const selectCount = (state) => state.productList.name;
// // export const selectSize = (state) => state.productList.name;
// // export const selectWeight = (state) => state.productList.name;
// // export const selectComments = (state) => state.productList.name;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.

// export default counterSlice.reducer;
